import { Telegraf, Markup, Context } from 'telegraf';
import { DatabaseService } from './services/supabase';
import { cache, CACHE_KEYS } from './utils/cache';
import { User, Product, Order, OrderWithItems } from './types';

export const bot = new Telegraf(process.env.BOT_TOKEN!);
const db = new DatabaseService();

// Session storage (in production, use Redis or similar)
const sessions = new Map<number, any>();

function getSession(userId: number) {
  if (!sessions.has(userId)) {
    sessions.set(userId, {});
  }
  return sessions.get(userId);
}

// Utility functions
function formatPrice(price: number): string {
  return `${price.toFixed(0)} ‚ÇΩ`;
}

function formatOrder(order: OrderWithItems): string {
  let text = `üìã –ó–∞–∫–∞–∑ #${order.id}\n`;
  text += `üìÖ ${new Date(order.created_at).toLocaleString('ru')}\n`;
  text += `üìç ${order.pickup_location === 'left_buffer' ? '–õ–µ–≤—ã–π –±—É—Ñ–µ—Ç' : '–ü—Ä–∞–≤—ã–π –±—É—Ñ–µ—Ç'}\n`;
  text += `üìä –°—Ç–∞—Ç—É—Å: ${getStatusText(order.status)}\n\n`;
  
  text += `üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n`;
  for (const item of order.order_items) {
    text += `‚Ä¢ ${item.product.name} x${item.quantity} = ${formatPrice(item.quantity * item.price_at_time)}\n`;
  }
  
  text += `\nüí∞ –ò—Ç–æ–≥–æ: ${formatPrice(order.total_amount)}`;
  
  return text;
}

function getStatusText(status: string): string {
  const statusMap: Record<string, string> = {
    'cart': 'üõí –í –∫–æ—Ä–∑–∏–Ω–µ',
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    'preparing': 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
    'ready_for_pickup': '‚úÖ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
  };
  return statusMap[status] || status;
}

async function getCachedProducts(): Promise<Product[]> {
  let products = cache.get<Product[]>(CACHE_KEYS.PRODUCTS);
  
  if (!products) {
    products = await db.getAvailableProducts();
    cache.set(CACHE_KEYS.PRODUCTS, products, 300000); // 5 minutes
  }
  
  return products;
}

async function getCachedProductsByCategory(category: string): Promise<Product[]> {
  const cacheKey = CACHE_KEYS.PRODUCTS_BY_CATEGORY(category);
  let products = cache.get<Product[]>(cacheKey);
  
  if (!products) {
    products = await db.getProductsByCategory(category);
    cache.set(cacheKey, products, 300000); // 5 minutes
  }
  
  return products;
}

async function notifySellers(order: OrderWithItems): Promise<void> {
  try {
    if (!order.pickup_location) return;

    const sellerRole = order.pickup_location === 'left_buffer' ? 'seller_left' : 'seller_right';
    
    // In a real application, you would maintain a list of seller chat IDs
    // For now, we'll log the notification
    console.log(`Notification for ${sellerRole}: New order #${order.id}`);
    
    // Here you would send the notification to sellers
    // const sellerChatIds = await getSellersForLocation(order.pickup_location);
    // for (const chatId of sellerChatIds) {
    //   await bot.telegram.sendMessage(chatId, formatOrder(order), {
    //     reply_markup: Markup.inlineKeyboard([
    //       Markup.button.callback('üë®‚Äçüç≥ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_order_${order.id}`)
    //     ]).reply_markup
    //   });
    // }
  } catch (error) {
    console.error('Error notifying sellers:', error);
  }
}

// Bot middleware
bot.use(async (ctx, next) => {
  if (!ctx.from) return;
  
  const userId = ctx.from.id;
  let user = await db.getUserByTelegramId(userId);
  
  if (!user) {
    // Create new user
    user = await db.createOrUpdateUser({
      user_id: userId,
      username: ctx.from.username,
      full_name: ctx.from.first_name + (ctx.from.last_name ? ` ${ctx.from.last_name}` : ''),
      role: 'customer'
    });
  }
  
  ctx.state.user = user;
  return next();
});

// Start command
bot.command('start', async (ctx) => {
  const user = ctx.state.user as User;
  
  if (user.role === 'customer') {
    await showCustomerMainMenu(ctx);
  } else {
    await showSellerMainMenu(ctx);
  }
});

// Customer functions
async function showCustomerMainMenu(ctx: Context) {
  const user = ctx.state.user as User;
  const cartOrder = await db.getOrCreateCartOrder(user.user_id);
  const cartItemsCount = cartOrder ? await getCartItemsCount(cartOrder.id) : 0;
  
  const keyboard = Markup.keyboard([
    ['üçø –ó–∞–∫–∞–∑–∞—Ç—å'],
    [`üõí –ö–æ—Ä–∑–∏–Ω–∞ (${cartItemsCount})`, 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']
  ]).resize();
  
  await ctx.reply(
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Popcorn Shop! üçø\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    keyboard
  );
}

async function getCartItemsCount(orderId: number): Promise<number> {
  try {
    const order = await db.getOrderWithItems(orderId);
    return order?.order_items.reduce((sum, item) => sum + item.quantity, 0) || 0;
  } catch {
    return 0;
  }
}

// Handle customer menu
bot.hears('üçø –ó–∞–∫–∞–∑–∞—Ç—å', async (ctx) => {
  const user = ctx.state.user as User;
  
  // Check for active orders
  const orders = await db.getOrdersByCustomer(user.user_id);
  const activeOrder = orders.find(order => 
    !['cart', 'completed', 'cancelled'].includes(order.status)
  );
  
  if (activeOrder) {
    await ctx.reply(
      `–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ #${activeOrder.id}\n–°—Ç–∞—Ç—É—Å: ${getStatusText(activeOrder.status)}\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.`
    );
    return;
  }
  
  await showCategoriesMenu(ctx);
});

async function showCategoriesMenu(ctx: Context) {
  const keyboard = Markup.keyboard([
    ['üçø –ü–æ–ø–∫–æ—Ä–Ω', 'ü•§ –ù–∞–ø–∏—Ç–∫–∏'],
    ['üç≠ –°–∞—Ö–∞—Ä–Ω–∞—è –≤–∞—Ç–∞'],
    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
  ]).resize();
  
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', keyboard);
}

// Category handlers
bot.hears('üçø –ü–æ–ø–∫–æ—Ä–Ω', async (ctx) => {
  await showProductsInCategory(ctx, 'popcorn');
});

bot.hears('ü•§ –ù–∞–ø–∏—Ç–∫–∏', async (ctx) => {
  await showProductsInCategory(ctx, 'drinks');
});

bot.hears('üç≠ –°–∞—Ö–∞—Ä–Ω–∞—è –≤–∞—Ç–∞', async (ctx) => {
  await showProductsInCategory(ctx, 'cotton_candy');
});

async function showProductsInCategory(ctx: Context, category: string) {
  const products = await getCachedProductsByCategory(category);
  
  if (products.length === 0) {
    await ctx.reply('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.');
    return;
  }
  
  const buttons = products.map(product => 
    Markup.button.callback(
      `${product.name} - ${formatPrice(product.price)}`,
      `add_product_${product.id}`
    )
  );
  
  // Add buttons in rows of 1
  const keyboard = Markup.inlineKeyboard(
    buttons.map(button => [button])
  );
  
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', keyboard);
}

// Handle product selection
bot.action(/add_product_(\d+)/, async (ctx) => {
  const productId = parseInt(ctx.match[1]);
  const user = ctx.state.user as User;
  
  try {
    const products = await getCachedProducts();
    const product = products.find(p => p.id === productId);
    
    if (!product) {
      await ctx.answerCbQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const cartOrder = await db.getOrCreateCartOrder(user.user_id);
    if (!cartOrder) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
      return;
    }
    
    const success = await db.addItemToOrder(cartOrder.id, productId, 1, product.price);
    
    if (success) {
      await ctx.answerCbQuery(`‚úÖ ${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –ï—â–µ –æ–¥–∏–Ω', `add_product_${productId}`)],
        [Markup.button.callback('üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'show_cart')],
        [Markup.button.callback('üçø –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'continue_shopping')]
      ]);
      
      await ctx.editMessageText(
        `‚úÖ ${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?`,
        keyboard
      );
    } else {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
  } catch (error) {
    console.error('Error adding product:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// Cart handlers
bot.hears(/üõí –ö–æ—Ä–∑–∏–Ω–∞/, async (ctx) => {
  await showCart(ctx);
});

bot.action('show_cart', async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  await showCart(ctx);
});

bot.action('continue_shopping', async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  await showCategoriesMenu(ctx);
});

async function showCart(ctx: Context) {
  const user = ctx.state.user as User;
  const cartOrder = await db.getOrCreateCartOrder(user.user_id);
  
  if (!cartOrder) {
    await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
    return;
  }
  
  const orderWithItems = await db.getOrderWithItems(cartOrder.id);
  
  if (!orderWithItems || orderWithItems.order_items.length === 0) {
    await ctx.reply('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.');
    return;
  }
  
  let text = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n';
  for (const item of orderWithItems.order_items) {
    text += `‚Ä¢ ${item.product.name} x${item.quantity} = ${formatPrice(item.quantity * item.price_at_time)}\n`;
  }
  text += `\nüí∞ –ò—Ç–æ–≥–æ: ${formatPrice(orderWithItems.total_amount)}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'checkout_order')],
    [Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'clear_cart')],
    [Markup.button.callback('üçø –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'continue_shopping')]
  ]);
  
  await ctx.reply(text, keyboard);
}

// Checkout process
bot.action('checkout_order', async (ctx) => {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìç –õ–µ–≤—ã–π –±—É—Ñ–µ—Ç', 'pickup_left_buffer')],
    [Markup.button.callback('üìç –ü—Ä–∞–≤—ã–π –±—É—Ñ–µ—Ç', 'pickup_right_buffer')],
    [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'show_cart')]
  ]);
  
  await ctx.editMessageText(
    '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:',
    keyboard
  );
});

bot.action('pickup_left_buffer', async (ctx) => {
  await processCheckout(ctx, 'left_buffer');
});

bot.action('pickup_right_buffer', async (ctx) => {
  await processCheckout(ctx, 'right_buffer');
});

async function processCheckout(ctx: Context, pickupLocation: 'left_buffer' | 'right_buffer') {
  const user = ctx.state.user as User;
  
  try {
    const cartOrder = await db.getOrCreateCartOrder(user.user_id);
    if (!cartOrder) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
      return;
    }
    
    const orderWithItems = await db.getOrderWithItems(cartOrder.id);
    if (!orderWithItems || orderWithItems.order_items.length === 0) {
      await ctx.answerCbQuery('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }
    
    const success = await db.updateOrderStatus(cartOrder.id, 'pending', pickupLocation);
    
    if (success) {
      const updatedOrder = await db.getOrderWithItems(cartOrder.id);
      if (updatedOrder) {
        await notifySellers(updatedOrder);
      }
      
      await ctx.editMessageText(
        `‚úÖ –ó–∞–∫–∞–∑ #${cartOrder.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n` +
        `üìç –ú–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è: ${pickupLocation === 'left_buffer' ? '–õ–µ–≤—ã–π –±—É—Ñ–µ—Ç' : '–ü—Ä–∞–≤—ã–π –±—É—Ñ–µ—Ç'}\n` +
        `üí∞ –°—É–º–º–∞: ${formatPrice(orderWithItems.total_amount)}\n\n` +
        `–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.`
      );
      
      await showCustomerMainMenu(ctx);
    } else {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  } catch (error) {
    console.error('Error processing checkout:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
}

// Orders history
bot.hears('üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', async (ctx) => {
  const user = ctx.state.user as User;
  const orders = await db.getOrdersByCustomer(user.user_id);
  
  if (orders.length === 0) {
    await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
    return;
  }
  
  let text = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
  for (const order of orders.slice(0, 10)) { // Show last 10 orders
    text += `–ó–∞–∫–∞–∑ #${order.id} - ${getStatusText(order.status)} - ${formatPrice(order.total_amount)}\n`;
    text += `${new Date(order.created_at).toLocaleDateString('ru')}\n\n`;
  }
  
  await ctx.reply(text);
});

// Seller functions
async function showSellerMainMenu(ctx: Context) {
  const keyboard = Markup.keyboard([
    ['üì• –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', 'üë®‚Äçüç≥ –í —Ä–∞–±–æ—Ç–µ'],
    ['‚úÖ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã']
  ]).resize();
  
  await ctx.reply('–ü–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞:', keyboard);
}

bot.hears('üì• –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', async (ctx) => {
  const user = ctx.state.user as User;
  if (user.role === 'customer') return;
  
  const orders = await db.getPendingOrdersForSeller(user.role as any);
  
  if (orders.length === 0) {
    await ctx.reply('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.');
    return;
  }
  
  for (const order of orders) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üë®‚Äçüç≥ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_order_${order.id}`)]
    ]);
    
    await ctx.reply(formatOrder(order), keyboard);
  }
});

bot.hears('üë®‚Äçüç≥ –í —Ä–∞–±–æ—Ç–µ', async (ctx) => {
  const user = ctx.state.user as User;
  if (user.role === 'customer') return;
  
  const orders = await db.getActiveOrdersForSeller(user.role as any);
  const preparingOrders = orders.filter(o => o.status === 'preparing');
  
  if (preparingOrders.length === 0) {
    await ctx.reply('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.');
    return;
  }
  
  for (const order of preparingOrders) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', `ready_order_${order.id}`)]
    ]);
    
    await ctx.reply(formatOrder(order), keyboard);
  }
});

bot.hears('‚úÖ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', async (ctx) => {
  const user = ctx.state.user as User;
  if (user.role === 'customer') return;
  
  const orders = await db.getActiveOrdersForSeller(user.role as any);
  const readyOrders = orders.filter(o => o.status === 'ready_for_pickup');
  
  if (readyOrders.length === 0) {
    await ctx.reply('–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.');
    return;
  }
  
  for (const order of readyOrders) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì¶ –í—ã–¥–∞–Ω', `complete_order_${order.id}`)]
    ]);
    
    await ctx.reply(formatOrder(order), keyboard);
  }
});

// Seller actions
bot.action(/take_order_(\d+)/, async (ctx) => {
  const orderId = parseInt(ctx.match[1]);
  
  try {
    const success = await db.atomicStatusUpdate(orderId, 'pending', 'preparing');
    
    if (success) {
      await ctx.answerCbQuery('‚úÖ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É');
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    } else {
      await ctx.answerCbQuery('‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–æ–º');
    }
  } catch (error) {
    console.error('Error taking order:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action(/ready_order_(\d+)/, async (ctx) => {
  const orderId = parseInt(ctx.match[1]);
  
  try {
    const success = await db.updateOrderStatus(orderId, 'ready_for_pickup');
    
    if (success) {
      await ctx.answerCbQuery('‚úÖ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ');
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
      
      // Notify customer
      const order = await db.getOrderWithItems(orderId);
      if (order) {
        try {
          await bot.telegram.sendMessage(
            order.customer_id,
            `üîî –í–∞—à –∑–∞–∫–∞–∑ #${order.id} –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!\nüìç ${order.pickup_location === 'left_buffer' ? '–õ–µ–≤—ã–π –±—É—Ñ–µ—Ç' : '–ü—Ä–∞–≤—ã–π –±—É—Ñ–µ—Ç'}`
          );
        } catch (error) {
          console.log('Could not notify customer:', error);
        }
      }
    } else {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
  } catch (error) {
    console.error('Error marking order ready:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action(/complete_order_(\d+)/, async (ctx) => {
  const orderId = parseInt(ctx.match[1]);
  
  try {
    const success = await db.updateOrderStatus(orderId, 'completed');
    
    if (success) {
      await ctx.answerCbQuery('‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω');
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    } else {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
  } catch (error) {
    console.error('Error completing order:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// Clear cart
bot.action('clear_cart', async (ctx) => {
  // Implementation for clearing cart would go here
  await ctx.answerCbQuery('–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞');
});

// Back navigation
bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
  const user = ctx.state.user as User;
  if (user.role === 'customer') {
    await showCustomerMainMenu(ctx);
  } else {
    await showSellerMainMenu(ctx);
  }
});

// Error handling
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.').catch(() => {});
});

export default bot;